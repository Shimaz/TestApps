package com.pnf.pen.test;

import java.util.Timer;
import java.util.TimerTask;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.PointF;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.KeyEvent;
import android.view.View;
import android.view.WindowManager;
import android.view.ViewGroup.LayoutParams;
import android.widget.RelativeLayout;
import android.widget.Toast;

import com.pnf.bt.lib.PNFDefine;
import com.pnf.bt.lib.PenDataClass;
import com.pnf.pen.drawingview.DrawView;

public class EsopMainActivity extends Activity{
	
	
	protected final String TAG = "EsopMainActivity";
	
	private final byte REQUEST_DRAWVIEW = 0x00;
	private final byte REQUEST_CALIBRATIONVIEW = 0x01;
	private final byte REQUEST_TIMETESTVIEW = 0x02;
	private final byte REQUEST_THRESHOLDVIEW = 0x03;
	
	private final byte ALERTVIEW_FAIL_LISTENING = 0x00;
	private final byte ALERTVIEW_APP_EXIT = 0x01;
	
	private final byte SLEEPVIEW_SHOWPOPUP = 0x00;
	private final byte SLEEPVIEW_CLOSEPOPUP = 0x01;
	private final byte SLEEPVIEW_STARTPOPUP = 0x02;

	
	View penSleepView;
	
	boolean isHasFocus = false;
	int penErrorCnt = 0;
	int packetCnt = 0;
	int downCnt = 0;
	int moveCnt = 0;
	int upCnt = 0;
	int errCntX = 0;
	int errCntY = 0;
	int beforeRawX = -1;
	int beforeRawY = -1;

	
	private DrawView dv;
	private RelativeLayout rlMain;
	@Override
	protected void onCreate(Bundle sis){
		super.onCreate(sis);
		
		/*Disable Sleep Mode */
        super.getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
		
		setContentView(R.layout.layout_esop_main);
		rlMain = (RelativeLayout)findViewById(R.id.rl_esop_main);
		dv = new DrawView(this);
		rlMain.addView(dv);
		
		
		
		
	}
	
	@Override
	protected void onResume() {
		super.onResume();
		
		if(MainDefine.penController != null){
			MainDefine.penController.SetRetObj(penHandler);
			MainDefine.penController.SetRetObjForEnv(penEnvHandler);
			MainDefine.penController.SetRetObjForMsg(messageHandler);
		}
		
	}

	@Override
	protected void onPause() {
		super.onPause();
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		
		stopPenAliveTimer();
	}

	@Override
	protected void onUserLeaveHint() {
		super.onUserLeaveHint();
	}
	
	
	@Override
    public void onWindowFocusChanged(boolean hasFocus) {
		isHasFocus = hasFocus;
    }

	@Override
	public void onBackPressed()
	{
		if(penSleepView.getVisibility() == View.VISIBLE){
			penSleepBtnClicked(1);
			return;
		}
		
		showAlertView(ALERTVIEW_APP_EXIT);
		return;
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) 
	{
		if(keyCode == KeyEvent.KEYCODE_MENU){
			return true;
		}

		return super.onKeyDown(keyCode, event);
	}
	
	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) 
	{
		boolean isResultOK = resultCode == Activity.RESULT_OK?true:false;
		String debugStr = "";
		
		switch(requestCode)
		{
		case REQUEST_DRAWVIEW:
			if(isResultOK){
				debugStr = data.getExtras().getString("debug");
			}
			break;
		case REQUEST_CALIBRATIONVIEW:
			if(isResultOK){
				debugStr = data.getExtras().getString("debug");
			}
			break;
		case REQUEST_TIMETESTVIEW:
			break;
		case REQUEST_THRESHOLDVIEW:
			break;
		}
	}
	
	void showAlertView(int alertTag){
    	AlertDialog.Builder builder = null;
    	AlertDialog alert = null;
    	
    	builder = new AlertDialog.Builder(EsopMainActivity.this);
    	builder.setCancelable(false);
    	
    	switch(alertTag)
    	{
    	case ALERTVIEW_FAIL_LISTENING:
    		builder.setTitle(getResources().getString(R.string.FAIL_LISTENING_MSG));
        	builder.setPositiveButton(getResources().getString(R.string.COMMON_OK), new DialogInterface.OnClickListener() {
        		public void onClick(DialogInterface dialog, int which) {
        			dialog.dismiss();
        		}
        	});
        	builder.setNegativeButton(getResources().getString(R.string.COMMON_CANCEL), new DialogInterface.OnClickListener() {
        		public void onClick(DialogInterface dialog, int which) {
        			dialog.dismiss();
        		}
        	});
    		break;
    	case ALERTVIEW_APP_EXIT:
    		builder.setTitle(getResources().getString(R.string.QUIL_APP));
        	builder.setPositiveButton(getResources().getString(R.string.COMMON_OK), new DialogInterface.OnClickListener() {
        		public void onClick(DialogInterface dialog, int which) {
        			dialog.dismiss();
        			
        			setResult(RESULT_OK ,null);
        			finish();
        		}
        	});
        	builder.setNegativeButton(getResources().getString(R.string.COMMON_CANCEL), new DialogInterface.OnClickListener() {
        		public void onClick(DialogInterface dialog, int which) {
        			dialog.dismiss();
        		}
        	});
    		break;
    	}
    	
    	alert = builder.create();
    	alert.show();
	}
	  /*
     * 펜 데이타
     */
    @SuppressLint("HandlerLeak")
	protected Handler penHandler = new Handler() 
	{        
		@Override
		public void handleMessage(Message msg) 
		{
			onPenEvent(msg.what ,msg.arg1 ,msg.arg2 ,msg.obj);
		}
	};
	
	int temperatureCnt = 0;
	protected void onPenEvent(int what, int RawX, int RawY ,Object obj)
	{
		penPopupHandler.sendEmptyMessage(SLEEPVIEW_STARTPOPUP);
		
		if(!isHasFocus) return;
		
		if (MainDefine.penController == null) {
	        return;
	    }
		
		PointF pos = MainDefine.penController.GetCoordinatePostionXY(RawX,RawY);
		PenDataClass penData = (PenDataClass)obj;
		
		packetCnt++;
		
		if(penData.Pen_Temperature <= 10){
			temperatureCnt++;
			if(temperatureCnt >= 1000){
				temperatureCnt = 0;
				Toast.makeText(
						getApplicationContext(),
						MainDefine.getLangString(getApplicationContext() ,R.string.PEN_TEMP_ERROR_MSG),
						Toast.LENGTH_SHORT)
					.show();
			}
		}else{
			temperatureCnt = 0;
		}
		
		
		switch(what)
		{
		case PNFDefine.PEN_DOWN:
			downCnt++;
			break;
		case PNFDefine.PEN_MOVE:
			moveCnt++;
			break;
		case PNFDefine.PEN_UP:
			upCnt++;
			break;
			
			
		case PNFDefine.PEN_HOVER:
			break;
		case PNFDefine.PEN_HOVER_DOWN:
			break;
		case PNFDefine.PEN_HOVER_MOVE:
			break;
			
		
		}
		
		if (beforeRawX == -1) {
	        beforeRawX = RawX;
	    }
	    else {
	        if (Math.abs(RawX-beforeRawX) > 10000) {
	            errCntX++;
	        }
	    }
	    if (beforeRawY == -1) {
	        beforeRawY = RawY;
	    }
	    else {
	        if (Math.abs(RawY-beforeRawY) > 10000) {
	            errCntY++;
	        }
	    }
	}
	
	
	/*
	 * 환경 데이타
	 */
	boolean isCheckSleepView = false;
	final int penSleepDelay = 600;
	int savePenSleepRemainingTime;
	int savePenAliveSec;
	int curPenAliveSec;
	int penCheckAliveCnt;
	
	Timer penAliveTimer = null;
	
	public void penSleepBtnClicked(View v){		
		penSleepBtnClicked(Integer.parseInt(v.getTag().toString()));
	}
	
	public void penSleepBtnClicked(int btnTag){
		switch(btnTag)
		{
		case 0://none
			break;
		case 1://close
			penPopupHandler.sendEmptyMessage(SLEEPVIEW_CLOSEPOPUP);
			break;
		}
	}
	
	void stopPenAliveTimer(){
		isCheckSleepView = false;
		
		if(penAliveTimer != null){
    		penAliveTimer.cancel();
			penAliveTimer.purge();
			penAliveTimer = null;
    	}
	}
	
	@SuppressLint("HandlerLeak")
	protected Handler penEnvHandler = new Handler() 
	{        
		@Override
		public void handleMessage(Message msg) 
		{
			onPenEnvEvent(msg.what ,msg.arg1 ,msg.arg2 ,msg.obj);
		}
	};
	
	protected void onPenEnvEvent(int what, int RawX, int RawY ,Object obj)
	{
		if(!isHasFocus) return;
		if(obj == null) return;		
		
		switch(what)
		{
		//환경 데이타일 경우
		case PNFDefine.PNF_MSG_ENV_DATA:
			PenDataClass penData = (PenDataClass)obj;
			
			curPenAliveSec = penData.Pen_Alive;
			
			
			if(curPenAliveSec > 0){
				if(penSleepView.getVisibility() == View.VISIBLE){
					penSleepView.setVisibility(View.GONE);
				}
			}
			
			if(isCheckSleepView){
				if(penAliveTimer == null) {
			        penAliveTimer = new Timer();
			        TimerTask penAliveTask = new TimerTask() {
						@Override
						public void run() {
							onTimerForPenAlive();
						}
					};
					penAliveTimer.schedule(penAliveTask, 1000 ,1000);
					
			        savePenSleepRemainingTime = (int) MainDefine.GetCurrentSec() + penSleepDelay;
			        savePenAliveSec = penSleepDelay;
			        curPenAliveSec = penSleepDelay;
			    }
			}
			break;
		}
	}
	
	protected void onTimerForPenAlive(){
		int curTime = (int) MainDefine.GetCurrentSec();
		
		boolean check = false;
		if(MainDefine.penController.getModelCode() == MainDefine.Equil){
			if(MainDefine.penController.getMCU1() >= 2 && MainDefine.penController.getMCU2() >= 2 && MainDefine.penController.getHWVersion() >= 2){
				check = true;
			}
		}else if(MainDefine.penController.getModelCode() == MainDefine.Equil2){
			if(MainDefine.penController.getMCU1() >= 1 && MainDefine.penController.getMCU2() >= 1 && MainDefine.penController.getHWVersion() >= 1){
				check = true;
			}
		}
		
		if(check){
			if(curPenAliveSec <= 0) {
				penPopupHandler.sendEmptyMessage(SLEEPVIEW_SHOWPOPUP);
				return;
			}else{
				penCheckAliveCnt = 0;
			}
			
			
			if(curPenAliveSec != 0){
				if(savePenAliveSec != curPenAliveSec){
					savePenAliveSec = curPenAliveSec;
					savePenSleepRemainingTime = (int) curTime+curPenAliveSec;
				}
			}
		}
		
		if(savePenSleepRemainingTime - curTime < 0) {
			penPopupHandler.sendEmptyMessage(SLEEPVIEW_SHOWPOPUP);
		}else{
			penCheckAliveCnt = 0;
		}
	}
	
	
	@SuppressLint("HandlerLeak")
	protected Handler penPopupHandler = new Handler() 
	{        
		@Override
		public void handleMessage(Message msg) 
		{
			switch(msg.what)
			{
			case SLEEPVIEW_SHOWPOPUP://슬핍 팝업창 호출
				if(++penCheckAliveCnt > 10){
					if(penSleepView.getVisibility() == View.GONE){
						penSleepView.setVisibility(View.VISIBLE);
					}
					
					stopPenAliveTimer();
				}
				break;
			case SLEEPVIEW_CLOSEPOPUP://X버튼으로 강제 닫기
				if(penSleepView.getVisibility() == View.VISIBLE){
					penSleepView.setVisibility(View.GONE);
				}
				
				stopPenAliveTimer();
				break;
			case SLEEPVIEW_STARTPOPUP://펜 입력으로 닫기
				if(penSleepView.getVisibility() == View.VISIBLE){
					penSleepView.setVisibility(View.GONE);
				}
				
				isCheckSleepView = true;
				if(curPenAliveSec != penSleepDelay){
					savePenSleepRemainingTime = (int) MainDefine.GetCurrentSec() + penSleepDelay;
			        savePenAliveSec = penSleepDelay;
			        curPenAliveSec = penSleepDelay;
				}
				break;
			}
		}
	};
	
	/*
	 * 상태 데이타
	 */
	@SuppressLint("HandlerLeak")
	protected Handler messageHandler = new Handler() 
	{        
		@Override
		public void handleMessage(Message msg) 
		{
			onMessageEvent(msg.what ,msg.arg1 ,msg.arg2 ,msg.obj);
		}
	};
	
	protected void onMessageEvent(int what, int RawX, int RawY ,Object obj)
	{
		if(!isHasFocus) return;
		
		if(what == PNFDefine.PNF_MSG_FAIL_LISTENING){
			showAlertView(ALERTVIEW_FAIL_LISTENING);
			
			penPopupHandler.sendEmptyMessage(SLEEPVIEW_CLOSEPOPUP);
			return;
		}else if(what == PNFDefine.PNF_MSG_CONNECTED){
			
			penErrorCnt = 0;
			penPopupHandler.sendEmptyMessage(SLEEPVIEW_STARTPOPUP);
		}
		else if(what == PNFDefine.PNF_MSG_INVALID_PROTOCOL){
			return;
		}
		
		else if(what == PNFDefine.PNF_MSG_SESSION_CLOSED){
		}
		else if(what == PNFDefine.PNF_MSG_PEN_RMD_ERROR){
			penErrorCnt++;
			if (penErrorCnt > 5) {
				Toast.makeText(
						getApplicationContext(),
						MainDefine.getLangString(getApplicationContext() ,R.string.PEN_RMD_ERROR_MSG),
						Toast.LENGTH_SHORT)
					.show();
				penErrorCnt = 0;
			}
			return;
		}
		else if(what == PNFDefine.PNF_MSG_FIRST_DATA_RECV){
			android.util.Log.i("ESOP PEN", "PNF_MSG_FIRST_DATA_RECV");
		}
		else if(what == PNFDefine.GESTURE_CIRCLE_CLOCKWISE){
			android.util.Log.i("ESOP PEN", "GESTURE_CIRCLE_CLOCKWISE");
			return;
		}
		else if(what == PNFDefine.GESTURE_CIRCLE_COUNTERCLOCKWISE){
			android.util.Log.i("ESOP PEN", "GESTURE_CIRCLE_COUNTERCLOCKWISE");
			return;
		}
		else if(what == PNFDefine.GESTURE_CLICK){
			android.util.Log.i("ESOP PEN", "GESTURE_CLICK");
			return;
		}
		else if(what == PNFDefine.GESTURE_DOUBLECLICK){
			android.util.Log.i("ESOP PEN", "GESTURE_DOUBLECLICK");
			return;
		}
		
		packetCnt++;
	}
	
}
